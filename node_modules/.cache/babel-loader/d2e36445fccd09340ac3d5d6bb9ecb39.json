{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resizeAndCropImage;\n\nvar _polyfill = require('./polyfill');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction resizeAndCropImage(file, w, h) {\n  if (!HTMLCanvasElement.prototype.toBlob) {\n    (0, _polyfill2.default)();\n  }\n\n  return new Promise(function (resolve, reject) {\n    // Create file reader\n    var reader = new FileReader();\n\n    reader.onload = function (readerEvent) {\n      // Create image object\n      var image = new Image();\n\n      image.onload = function (imageEvent) {\n        // Create canvas or use provided canvas\n        var canvas = document.createElement('canvas');\n        var maxWidth = w || image.width;\n        var maxHeight = h || image.height;\n        canvas.width = maxWidth;\n        canvas.height = maxHeight; // Calculate scaling\n\n        var horizontalScale = maxWidth / image.width;\n        var verticalScale = maxHeight / image.height;\n        var scale = Math.max(horizontalScale, verticalScale); // Calculate cropping\n\n        var width = scale * image.width,\n            height = scale * image.height;\n        var verticalOffset = Math.min((maxHeight - height) / 2, 0);\n        var horizontalOffset = Math.min((maxWidth - width) / 2, 0); // Obtain the context for a 2d drawing\n\n        var context = canvas.getContext('2d');\n\n        if (!context) {\n          return reject('Could not get the context of the canvas element');\n        } // Draw the resized and cropped image\n\n\n        context.drawImage(image, horizontalOffset, verticalOffset, width, height);\n        canvas.toBlob(function (blob) {\n          resolve(blob);\n        }, file.type);\n      };\n\n      image.src = readerEvent.target.result;\n    };\n\n    reader.readAsDataURL(file);\n  });\n}","map":{"version":3,"sources":["/home/kirito/Desktop/Wecode/CV-Constructor/node_modules/react-firebase-file-uploader/lib/utils/image.js"],"names":["Object","defineProperty","exports","value","default","resizeAndCropImage","_polyfill","require","_polyfill2","_interopRequireDefault","obj","__esModule","file","w","h","HTMLCanvasElement","prototype","toBlob","Promise","resolve","reject","reader","FileReader","onload","readerEvent","image","Image","imageEvent","canvas","document","createElement","maxWidth","width","maxHeight","height","horizontalScale","verticalScale","scale","Math","max","verticalOffset","min","horizontalOffset","context","getContext","drawImage","blob","type","src","target","result","readAsDataURL"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resizeAndCropImage;\n\nvar _polyfill = require('./polyfill');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction resizeAndCropImage(file, w, h) {\n  if (!HTMLCanvasElement.prototype.toBlob) {\n    (0, _polyfill2.default)();\n  }\n  return new Promise(function (resolve, reject) {\n    // Create file reader\n    var reader = new FileReader();\n    reader.onload = function (readerEvent) {\n      // Create image object\n      var image = new Image();\n      image.onload = function (imageEvent) {\n        // Create canvas or use provided canvas\n        var canvas = document.createElement('canvas');\n        var maxWidth = w || image.width;\n        var maxHeight = h || image.height;\n        canvas.width = maxWidth;\n        canvas.height = maxHeight;\n        // Calculate scaling\n        var horizontalScale = maxWidth / image.width;\n        var verticalScale = maxHeight / image.height;\n        var scale = Math.max(horizontalScale, verticalScale);\n        // Calculate cropping\n        var width = scale * image.width,\n            height = scale * image.height;\n\n        var verticalOffset = Math.min((maxHeight - height) / 2, 0);\n        var horizontalOffset = Math.min((maxWidth - width) / 2, 0);\n        // Obtain the context for a 2d drawing\n        var context = canvas.getContext('2d');\n        if (!context) {\n          return reject('Could not get the context of the canvas element');\n        }\n        // Draw the resized and cropped image\n        context.drawImage(image, horizontalOffset, verticalOffset, width, height);\n        canvas.toBlob(function (blob) {\n          resolve(blob);\n        }, file.type);\n      };\n      image.src = readerEvent.target.result;\n    };\n    reader.readAsDataURL(file);\n  });\n}"]},"metadata":{},"sourceType":"script"}